<?xml version="1.0" encoding="UTF-8"?>
<record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_opt_ecm.RelatedCaseSearcher</api_name>
        <client_callable>false</client_callable>
        <description/>
        <name>RelatedCaseSearcher</name>
        <script><![CDATA[var RelatedCaseSearcher = Class.create();
RelatedCaseSearcher.prototype = {

	/*
		if (parent.contact_is_member && parent.contact_is_patient)
			// member query = contact fields && patient query = no-op ( would be contact fields )
			
		if (parent.contact_is_member && !parent.contact_is_patient)
			// member query = contact fields && patient query = patient fields
			
		if (!parent.contact_is_member && parent.contact_is_patient)
			// member query = member fields && patient query = contact fields
			
		if (!parent.contact_is_member && !parent.contact_is_patient && parent.member_is_patient)
			// member query = member fields && patient query = no-op ( would be member fields )
			
		if (!parent.contact_is_member && !parent.contact_is_patient && !parent.member_is_patient)
			// member query = member fields && patient query = patient fields
		
		*/
	
	
	updateQuery: function(current, parent, type) {
		
		// regardless of circumstance, don't return the this record
		current.addQuery('sys_id', '!=', parent.sys_id);
		
		var ssnField = this._getFieldPrefix(parent, type) + 'ssn';
		
		var commonSSN = new GlideAggregate('x_opt_ecm_case');
		commonSSN.addAggregate('COUNT');
		commonSSN.addQuery(ssnField, parent.getValue(ssnField));
		commonSSN.addNotNullQuery(ssnField);
		commonSSN.addQuery('sys_id', '!=', parent.sys_id);
		commonSSN.query();
commonSSN.next();
		gs.info('RelatedCaseSearcher :: found {0} cases matching SSN {1}', commonSSN.getAggregate('COUNT'), parent.getValue(ssnField));
		
		// found at least one matching SSN.  Use it.
		if (commonSSN.getAggregate('COUNT') > 0) {
			current.addQuery(ssnField, parent.getValue(ssnField));
		}

		// no matching SSNs.  match on identifying data
		else {
			
			var prefix = this._getFieldPrefix(parent, type);
			
			var firstNameField = prefix + 'first_name';
			var lastNameField = prefix + (prefix == 'patient' ? 'lastname' : 'last_name');
			var dobField = prefix + 'dob';
			var stateField = prefix + 'state';
			
			current.addQuery(firstNameField, parent.getValue(firstNameField));
			current.addQuery(lastNameField, parent.getValue(lastNameField));
			current.addQuery(dobField, parent.getValue(dobField));
			current.addQuery(stateField, parent.getValue(stateField));
		}
	},
	
	_getFieldPrefix: function(parent, type) {

		if (type == 'member') {
			return parent.contact_is_member ? 'contact_' : 'member_';
		}
		else {
			if (parent.contact_is_patient) {
				return 'contact_';
			}
			else if (parent.member_is_patient) {
				return 'member_';
			}
		}
		
		return 'patient_';
	},
	
	
	initialize: function() { },
		
	type: 'RelatedCaseSearcher'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>john.daniel</sys_created_by>
        <sys_created_on>2017-11-14 05:58:43</sys_created_on>
        <sys_customer_update>false</sys_customer_update>
        <sys_id>771c82e74f1203001e6cb4fe0210c70d</sys_id>
        <sys_mod_count>11</sys_mod_count>
        <sys_name>RelatedCaseSearcher</sys_name>
        <sys_package display_value="Escalated Complaint Management" source="x_opt_ecm">d1cfc3484f680b001e6cb4fe0210c7b7</sys_package>
        <sys_policy>read</sys_policy>
        <sys_replace_on_upgrade>false</sys_replace_on_upgrade>
        <sys_scope display_value="Escalated Complaint Management">d1cfc3484f680b001e6cb4fe0210c7b7</sys_scope>
        <sys_update_name>sys_script_include_771c82e74f1203001e6cb4fe0210c70d</sys_update_name>
        <sys_updated_by>john.daniel</sys_updated_by>
        <sys_updated_on>2017-11-14 07:23:44</sys_updated_on>
    </sys_script_include>
</record_update>
